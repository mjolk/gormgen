{{define "level"}}// DON'T EDIT *** generated by ormgen *** DON'T EDIT //

package {{.PackageName}}

import (
	"database/sql"
	"errors"
)
{{$level := .Level}}
{{$levels := .Levels}}

{{range .Tokens}}{{ if .Composite}}

func {{.Name}}From_lvl{{itoa $level}}() string { {{$basetpe := .Name}}
	return `FROM {{.Table}} {{.Alias}}{{range .Relations}}{{if .IsOneToMany }} LEFT JOIN {{if .IsAttribute}}(SELECT a.* FROM attribute a INNER JOIN objecttype o ON a.obj_id = o.obj_id WHERE o.name = '{{.ParentName}}' ) AS {{.Alias}} ON {{.ParentAlias}}.{{.From}} = {{.Alias}}.{{.To}}{{else}}{{.Table}} {{.Alias}} ON {{.ParentAlias}}.{{.From}} = {{.Alias}}.{{.To}}{{end}}{{end}}{{if .IsManyToMany}} LEFT JOIN {{.LinkTable}} {{.LinkAlias}} ON {{.ParentAlias}}.{{.From}} = {{.LinkAlias}}.{{.To}} LEFT JOIN {{.Table}} {{.Alias}} ON {{.LinkAlias}}.{{.LinkFrom}} = {{.Alias}}.{{.LinkTo}}{{end}}{{if .IsManyToOne}} LEFT JOIN {{.Table}} {{.Alias}} ON {{.ParentAlias}}.{{.From}} = {{.Alias}}.{{.To}}{{end}}{{end}}`
}

func {{.Name}}Select_lvl{{itoa $level}}() string { {{$tok := .}}
	return `SELECT {{range $fi, $fld := .Fields}}{{if $fi}}, {{end}}{{updatealias $tok . .Alias}}.{{.Column}}{{end}}`
}

func {{$.Visibility}}oad{{title .Name}}_lvl{{itoa $level}}(rs *sql.Rows) (*{{.Name}}, error) {
	result, err := {{$.Visibility}}oad{{title .Name}}s_lvl{{itoa $level}}(rs)
	if err != nil {
		return nil, err
	}
	if len(result) > 1 {
		return nil, errors.New("More than one result") 
	}
	return result[0], nil
}

func {{$.Visibility}}oad{{title .Name}}s_lvl{{itoa $level}}(rs *sql.Rows) ([]*{{.Name}}, error) {
	var err error
	result := make([]*{{.Name}}, 0)
	for rs.Next() {
		t := newSqlProxy{{.Name}}(){{range .Relations}}
		t.{{.ProxyFieldName}} = {{if .Proxy}}newSqlProxy{{.Type}}(){{else}}new(sql{{.Type}}){{end}}{{end}}
		if err = rs.Scan({{range .Fields}}
			&t.{{.Name}},{{end}}
		); err != nil {
			return nil, err
		}
		s := newProxy{{.Name}}(){{range .Relations}}
		s.{{.ProxyFieldName}} = {{if .Proxy}}newProxy{{.Type}}(){{else}}new({{.Type}}){{end}}{{end}}{{range .Fields}}
		s.{{.Name}} = {{if isint .Type}}checkSqlInt64Value(t.{{.Name}}){{else if isbool .Type}}checkSqlBoolValue(t.{{.Name}}){{ else if istime .Type}}checkSqlTimeValue(t.{{.Name}}){{else if isbyte .Type}}t.{{.Name}}{{else}}checkSqlStringValue(t.{{.Name}}){{end}}{{end}}
		entity := s.{{.Name}}
		var newID bool = true
		for _, ent := range result {
			if ent != nil {
				if ent.ID == s.ID {
					entity = ent
					newID = false
				}
			}
		}{{$token := .}}
		{{range .RootRelations}}
		{{template "merge" relarg $token . nil .}}
		{{end}}
                if newID {
			result = append(result, entity)
		}
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return result, nil
}

{{end}}
{{end}}{{end}}

{{define "merge"}}
{{$token := .Token}}{{$relation := .Relation}}{{$root := .RootRelation}}{{$fields:= .Token.Fields}}{{$relations := .Token.Relations}}{{if or .Relation.IsOneToMany .Relation.IsManyToMany}}{{tovar .Relation.FieldName}}Exists := false
		if s.{{.Relation.ProxyFieldName}}.ID != 0 { {{$parentlist := listfields .ParentRelation}}
			if len({{if checkparent .ParentRelation}}new{{.ParentRelation.Type}}.{{.Relation.Field}}{{else if ne $parentlist ""}}new{{$parentlist}}.{{.Relation.Field}}{{else}}entity.{{.Relation.FieldName}}{{end}}) > 0 {
				for _, rel := range {{if checkparent .ParentRelation}}new{{.ParentRelation.Type}}.{{.Relation.Field}}{{else if ne $parentlist ""}}new{{$parentlist}}.{{.Relation.Field}}{{else}}entity.{{.Relation.FieldName}}{{end}} {
					if rel.ID == s.{{.Relation.ProxyFieldName}}.ID {
						{{tovar .Relation.FieldName}}Exists = true
					}
				}
			}
			if !{{tovar .Relation.FieldName}}Exists { {{$omfiltrd := norel $fields .Relation.ProxyFieldName}}{{$omntpe := .Relation.Type}}
				new{{.Relation.Type}} := new({{.Relation.Type}}){{$tok := structtok .Relation.Type}}{{range $tok.RootRelations}}{{if .IsManyToOne}}
				new{{$omntpe}}.{{.FieldName}} = new({{.Type}}){{end}}{{end}}
				{{range $a, $b := $omfiltrd}}{{if $a}}
				{{end}}new{{$omntpe}}.{{proxyshift .Name}} = s.{{.Name}}{{end}}{{if .Relation.IsManyToMany}}{{$lfilterd := ffilter $fields .Relation.LinkField}}{{range $c, $d := $lfilterd}}{{if $c}}
				{{end}}newLINK{{$omntpe}}.{{proxyshift .Name}} = s.{{.Name}}{{end}}{{end}}{{end}}
				{{range .Relation.SubRelations .Token.Relations}}{{template "merge" relarg $token . $relation $root}}{{end}}
				{{if or .Relation.IsOneToMany .Relation.IsManyToMany}}{{if .ParentRelation}}{{$parentlist := listfields .ParentRelation}}{{if checkparent .ParentRelation}}new{{.ParentRelation.Type}}.{{.Relation.Field}}{{else if ne $parentlist ""}}new{{$parentlist}}.{{.Relation.Field}}{{else}}entity.{{.Relation.FieldName}}{{end}} = append({{if checkparent .ParentRelation}}new{{.ParentRelation.Type}}.{{.Relation.Field}}{{else if ne $parentlist ""}}new{{$parentlist}}.{{.Relation.Field}}{{else}}entity.{{.Relation.FieldName}}{{end}}, new{{.Relation.Type}}){{else}}
				entity.{{.RootRelation.FieldName}} = append(entity.{{.RootRelation.FieldName}}, new{{.Relation.Type}}){{end}}
			}
		}{{end}}
{{end}}



