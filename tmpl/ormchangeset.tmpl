{{define "changeset"}}// DON'T EDIT *** generated by ormgen *** DON'T EDIT
package {{.PackageName}}
{{$proto := eq $.Etype "proto"}}
import (
	"time"
	"strconv" {{if $proto}}
	"bitbucket.org/astrotit/registration-api/uuid" {{else}}
	"github.com/satori/go.uuid" {{end}}
	"fmt"
	"encoding/json"
)

func checkNil(val IntIdentifier) int64 {
	if val != nil {
		return val.Id()
	}
	return 0
}

func checkNilUUID(val UUIDIdentifier) uuid.UUID {
	if val != nil {
		return val.Id()
	}
	return uuid.UUID{}
}

{{range .Tokens}}{{$curname := .Name}}{{range .Fields}}{{if eq .Name "ID"}}{{if isuuid .Type}}
func (e *{{$curname}}) Id() uuid.UUID {
	return e.ID
} {{else}}
func (e *{{$curname}}) Id() int64 {
	return e.ID
}{{end}}{{end}}{{end}}

func (e *{{.Name}}) EventData() []byte {
	jsStruct := struct { {{$evfields := evdatafields .Fields}} {{range $evfields}} {{$obj := isobjectfield .}}
	{{.Name}} {{if $obj}}{{if isuuid (lookupidtype .Type)}}uuid.UUID{{else}}int64{{end}}{{else}}{{.Type}}{{end}}{{end}}	
	}{ {{range $evfields}} {{$obj := isobjectfield .}}
	{{.Name}}: {{if $obj}}{{if isuuid (lookupidtype .Type)}}checkNilUUID(e.{{.Name}}){{else}}checkNil(e.{{.Name}}){{end}}{{else}}e.{{.Name}}{{end}},{{end}}
	}
	enc, _ := json.Marshal(jsStruct)
	return enc
}{{end}}
{{range .Tokens}}{{$fields := changefields .}}{{$curname := .Name}}{{if gt (len $fields) 0}}
type {{.Name}}Updater interface { {{range $fields}}
	Get{{.Name}}() {{.Type}} {{end}}
}
{{range $fields}}
func (e *{{$curname}}) Get{{.Name}}() {{.Type}} {
	return e.{{.Name}}
}{{end}}{{end}}{{end}} 
{{range .Tokens}}{{$fields := changefields .}}{{$curname := .Name}}
{{range .Fields}}{{if eq .Name "Version"}}
func (e *{{$curname}}) VersionCheck(update *{{$curname}}) error {
	update.Version++
	if e.Version >= update.Version {
		return fmt.Errorf("version mismatch, object already newer version")
	}
	e.Version = update.Version
	e.Updated = time.Now()
	return nil
}
{{end}}{{if eq .Name "Attributes"}}
func (e *{{$curname}}) Attr() []*Attribute {
	return e.Attributes
}
{{end}}{{end}}{{if gt (len $fields) 0}}
func (e *{{.Name}}) ChangeSet(
	update {{.Name}}Updater,
	login *Login,
	buffer chan<- ObjectEvent,
	tpe *ObjectType,
	) bool {
	changed := false{{range $fields}}{{if ne .Name "Version"}}{{$objectfield := isobjectfield .}}
{{if isuuid .Type}}
if !uuid.Equal(e.{{.Name}}, update.Get{{.Name}}()) {
{{else if $objectfield }}{{if isuuid (lookupidtype .Type)}}
if !uuid.Equal(checkNilUUID(e.{{.Name}}), checkNilUUID(update.Get{{.Name}}())) { {{else}}
if checkNil(e.{{.Name}}) != checkNil(update.Get{{.Name}}()) { {{end}}
{{else}}
if e.{{.Name}} != update.Get{{.Name}}() {
{{end}}
buffer <- ObjectEvent{
		Type: tpe,
		Action: UPDATE,
		Login: login,
		Created: time.Now(),
		PropertyName: "{{.Name}}", {{if isuuid .Type}}
		OldValue: e.{{.Name}}.String(),
		NewValue: update.Get{{.Name}}().String(),{{else if isobjectfield .}}{{$type := lookupidtype .Type}}
		OldValue: {{if isuuid $type}}checkNilUUID(e.{{.Name}}).String(),{{else}}strconv.FormatInt(checkNil(e.{{.Name}}), 10),{{end}}
		NewValue: {{if isuuid $type}}checkNilUUID(update.Get{{.Name}}()).String(),{{else}}strconv.FormatInt(checkNil(update.Get{{.Name}}()), 10),{{end}}{{else}}
		OldValue:{{if isint .Type}}strconv.FormatInt(e.{{.Name}}, 10),{{else if istime .Type}}strconv.FormatInt(e.{{.Name}}.Unix(), 10),{{else if isbool .Type}}strconv.FormatBool(e.{{.Name}}),{{else}}e.{{.Name}},{{end}}
		NewValue:{{if isint .Type}}strconv.FormatInt(update.Get{{.Name}}(), 10),{{else if istime .Type}}strconv.FormatInt(update.Get{{.Name}}().Unix(), 10),{{else if isbool .Type}}strconv.FormatBool(update.Get{{.Name}}()),{{else}}update.Get{{.Name}}(),{{end}}{{end}}
	}
	e.{{.Name}} = update.Get{{.Name}}()
	changed = true
}
{{end}}
{{end}}
return changed
}
{{end}}
{{end}}
{{end}}
