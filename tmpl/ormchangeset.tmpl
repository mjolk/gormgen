{{define "changeset"}}// DON'T EDIT *** generated by ormgen *** DON'T EDIT
package {{.PackageName}}

import (
	"time"
	"strconv"
	"github.com/satori/go.uuid"
)

{{range .Tokens}}{{$fields := ffiltersliceandids .Fields}}
func (e *{{.Name}}) ChangeSet(
	update *{{.Name}},
	tpe *ObjectType,
	login *Login,
	buffer chan<- ObjectEvent,
	) bool { 
	changed := false{{range $fields}}{{$objectfield := isobjectfield .}}
{{if isuuid .Type}}
if !uuid.Equal(e.{{.Name}}, update.{{.Name}}) {
{{else if $objectfield }}{{if isuuid (lookupidtype .Type)}}
if !uuid.Equal(e.{{.Name}}.ID, update.{{.Name}}.ID) { {{else}}
if e.{{.Name}}.ID != update.{{.Name}}.ID { {{end}}
{{else}}
if e.{{.Name}} != update.{{.Name}} {
{{end}}
buffer <- ObjectEvent{
		Type: tpe,
		Action: UPDATE,
		Login: login,
		Created: time.Now(),
		PropertyName: "{{.Name}}", {{if isuuid .Type}}
		OldValue: e.{{.Name}}.String(),
		NewValue: update.{{.Name}}.String(),{{else if isobjectfield .}}{{$type := lookupidtype .Type}}
		OldValue: {{if isuuid $type}}e.{{.Name}}.ID.String(),{{else}}strconv.FormatInt(e.{{.Name}}.ID, 10),{{end}}
		NewValue: {{if isuuid $type}}update.{{.Name}}.ID.String(),{{else}}strconv.FormatInt(update.{{.Name}}.ID, 10),{{end}}{{else}}
		OldValue:{{if isint .Type}}strconv.FormatInt(e.{{.Name}}, 10),{{else if istime .Type}}strconv.FormatInt(e.{{.Name}}.Unix(), 10),{{else if isbool .Type}}strconv.FormatBool(e.{{.Name}}),{{else}}e.{{.Name}},{{end}}
		NewValue:{{if isint .Type}}strconv.FormatInt(update.{{.Name}}, 10),{{else if istime .Type}}strconv.FormatInt(update.{{.Name}}.Unix(), 10),{{else if isbool .Type}}strconv.FormatBool(update.{{.Name}}),{{else}}update.{{.Name}},{{end}}{{end}}
	}
	e.{{.Name}} = update.{{.Name}}
	changed = true
}
{{end}}
return changed
}
{{end}}
{{end}}
