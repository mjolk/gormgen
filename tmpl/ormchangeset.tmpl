{{define "changeset"}}// DON'T EDIT *** generated by ormgen *** DON'T EDIT
package {{.PackageName}}
{{$proto := eq $.Etype "proto"}}
import (
	"time"
	"strconv" {{if $proto}}
	"gitlab.com/astrotit/registration-api/uuid" {{else}}
	"github.com/gofrs/uuid" {{end}}
	"fmt"
	"encoding/json"
	"bytes"
)

var VersionError = fmt.Errorf("version mismatch, object already newer version")

{{range .Tokens}}{{$curname := .Name}}{{if islinked .}}
func(e *{{$curname}}) Id() int64 {
	if e.LinkID > 0 {
		return e.LinkID
	}
	return e.ID
} 
{{else}}{{range .Fields}}{{if eq .Name "ID"}}
func(e *{{$curname}}) Id(){{if isuuid .Type}} uuid.UUID{{else}} int64{{end}} {
	return e.ID
}
{{end}}{{end}}{{end}}{{end}}
{{range .Tokens}}{{$curname := .Name}}{{$evfields := evdatafields .Fields }}{{range $evfields}}{{$obj := isobjectfield .}}{{if $obj}}{{if isuuid (lookupidtype .Type)}}
func (e *{{$curname}}) {{.Name}}ID() uuid.UUID {
	if e.{{.Name}} != nil {
		return e.{{.Name}}.Id()
	}
	return uuid.Nil
} {{else}}
func (e *{{$curname}}) {{.Name}}ID() int64 {
	if e.{{.Name}} != nil {
		return e.{{.Name}}.Id()
	} 
	return 0
}{{end}}{{end}}{{end}}

func (e *{{.Name}}) EventData() []byte { 
jsStruct := struct { {{$evfields := evdatafields .Fields}}{{range $evfields}}{{$obj := and (isobjectfield .) (.Normalize)}}{{if ne .JSON "-"}}
{{.Name}} {{if $obj}}{{if isuuid (lookupidtype .Type)}}uuid.UUID{{else}}int64{{end}}{{else}}{{.Type}}{{end}} `json:"{{.JSON}}"`{{end}}{{end}}
}{ {{range $evfields}} {{$obj := and (isobjectfield .) (.Normalize)}}{{if ne .JSON "-"}}
{{.Name}}: {{if $obj}}{{if isuuid (lookupidtype .Type)}}e.{{.Name}}ID(){{else}}e.{{.Name}}ID(){{end}}{{else}}e.{{.Name}}{{end}},{{end}}{{end}}
	}
	enc, err := json.Marshal(jsStruct)
	if err != nil {
		panic(err)
	}
	return enc
}{{end}}
{{range .Tokens}}{{$fields := changefields .}}{{$curname := .Name}}
{{if versioned .}}
func (e *{{.Name}}) GetVersion() int64 {
	return e.Version
}

func (e *{{.Name}}) SetVersion() {
	e.Version++
}

func (e *{{.Name}}) GetUpdated() time.Time {
	return e.Updated
}

func (e *{{.Name}}) SetUpdated() {
	e.Updated = time.Now().UTC()
}

func (e *{{$curname}}) VersionCheck(update Entity) error {
	update.SetVersion()
	if e.GetVersion() >= update.GetVersion() {
		return VersionError
	}
	e.SetUpdated()
	return nil
}
{{else}}
func (e *{{.Name}}) GetVersion() int64 {
	return 0
}

func (e *{{.Name}}) SetVersion() {}

func (e *{{.Name}}) GetUpdated() time.Time {
	return time.Time{}
}

func (e *{{.Name}}) SetUpdated() {}
{{end}}
{{range .Fields}}{{if eq .Name "Attributes"}}
func (e *{{$curname}}) Attr() []*Attribute {
	return e.Attributes
}
{{end}}{{end}}{{if gt (len $fields) 0}}
func (e *{{.Name}}) ChangeSet(
	update *{{.Name}},
	) (bool, []*ObjectChange) {
	changes := make([]*ObjectChange, 0)
	changed := false{{range $fields}}{{if ne .Name "Updated"}}{{$objectfield := isobjectfield .}}
{{if isuuid .Type}}
if e.{{.Name}} != update.{{.Name}} { {{else if isbyte .Type}}
if !bytes.Equal(e.{{.Name}}, update.{{.Name}}) { 
{{else if $objectfield }}{{if isuuid (lookupidtype .Type)}}
if e.{{.Name}}ID() != update.{{.Name}}ID() { {{else}}
if e.{{.Name}}ID() != update.{{.Name}}ID() { {{end}}
{{else}}
if e.{{.Name}} != update.{{.Name}} {
{{end}}
	changes = append(changes, &ObjectChange{
		PropertyName: "{{.Name}}", {{if isuuid .Type}}
		OldValue: e.{{.Name}}.String(),
		NewValue: update.{{.Name}}.String(),{{else if isobjectfield .}}{{$type := lookupidtype .Type}}
		OldValue: {{if isuuid $type}}e.{{.Name}}ID().String(),{{else}}strconv.FormatInt(e.{{.Name}}ID(), 10),{{end}}
		NewValue: {{if isuuid $type}}update.{{.Name}}ID().String(),{{else}}strconv.FormatInt(update.{{.Name}}ID(), 10),{{end}}{{else}}
		OldValue:{{if isint .Type}}strconv.FormatInt(e.{{.Name}}, 10),{{else if istime .Type}}strconv.FormatInt(e.{{.Name}}.Unix(), 10),{{else if isbool .Type}}strconv.FormatBool(e.{{.Name}}),{{else if isbyte .Type}}string(e.{{.Name}}[:]),{{else}}e.{{.Name}},{{end}}
		NewValue:{{if isint .Type}}strconv.FormatInt(update.{{.Name}}, 10),{{else if istime .Type}}strconv.FormatInt(update.{{.Name}}.Unix(), 10),{{else if isbool .Type}}strconv.FormatBool(update.{{.Name}}),{{else if isbyte .Type}}string(update.{{.Name}}[:]),{{else}}update.{{.Name}},{{end}}{{end}}
	})
	e.{{.Name}} = update.{{.Name}}
	changed = true
}
{{end}}
{{end}}
return changed, changes
}
{{end}}
{{end}}
{{end}}
