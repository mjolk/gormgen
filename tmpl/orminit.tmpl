{{define "init"}}// DON'T EDIT *** generated by ormgen *** DON'T EDIT
package {{.PackageName}}

{{$psql := psql $.Dialect}}
{{$mysql := msql $.Dialect}}
{{$csql := csql $.Dialect}}
{{$schema := setschema $.Dialect}}
import "fmt"
const ( {{range .Tokens}} {{$natfields := ffilterslice .Fields}}{{$nlen := len $natfields | min1}}
	{{.Name}}Table = `
	create table if not exists {{$schema}}{{ .Table}}({{range $fi, $fld := $natfields}}
	  {{if .Relation}}{{if or $psql $csql}}{{template "psqlrelation" .}}{{else}}{{template "mysqlrelation"}}{{end}}{{else }}{{.Column}} {{.SQLType}}{{if .Link}}{{lookuplink .Link}}{{end}}{{if .Primary }} primary key{{else}}{{if .Delete}} on delete {{.Delete}}{{end}}{{if .Unique}} unique{{end}}{{if .NotNull}} not null{{end}}{{if .Default}} default {{.Default}}{{end}}{{end}}{{end}}{{if lt $fi $nlen}},{{end}}{{end}}{{if .CompositeKey}},
	  primary key({{range $fii, $ckd := .CompositeKey}}{{if $fii}},{{end}}{{.}}{{end}}){{end}}
	);`
{{if hassqlindexes .}} {{$table := .Table}}
{{range .SQLIndex}}
{{.Name}}Index = `
create {{if .Unique}}unique {{end}}index on {{$table}} ({{range $idx, $c := .Columns}}{{if $idx}},{{end}}{{.}}{{end}})
`{{end}}{{end}}{{end}}
)

var tables = []string{ {{range .Tokens}}
	{{.Name}}Table,{{end}}
}

var indexes = []string{ {{range .Tokens}}{{if hassqlindexes .}}{{range .SQLIndex}}
	{{.Name}}Index,{{end}}{{end}}{{end}}
}

//TODO enable whitelisting
func New(schema string, st []string) []string {
	tstrings := make([]string, len(tables)+len(indexes))
	for i, table := range tables {
		tstrings[i] = fmt.Sprintf(table, schema)
	}
	for j, index := range indexes {
		tstrings[len(tables) + j] = index
	}
	return tstrings
}

var Setup []string

func InitSchema(schema string) []string {
	if schema != "" {
		for idx, query := range Setup {
			Setup[idx] = fmt.Sprintf(query, schema)
		}
	}
        return Setup
}

{{template "schema" schemarg .Tokens}}
{{if $.Attributes}}{{template "setup" .}}{{end}}
{{end}}

{{define "schema"}}
{{range .}}
var {{title .Schema}}Schema  = []string{ {{range .Tables}}
	"{{ .Name}}",{{end}}
}{{end}}
{{end}}
{{define "psqlrelation"}}{{.Relation.From}} {{.Relation.SQLType}} references {{$schema}}{{.Relation.Table}}({{.Relation.To}}){{if .Delete}} on delete {{.Delete}}{{end}}{{if .Relation.NotNull}} not null{{end}}{{end}}
{{define "mysqlrelation"}}{{.Relation.From}} {{.Relation.SQLType}} {{if .Relation.NotNull}} not null{{end}},
foreign key ({{.Relation.From}}) references {{.Relation.Table}}({{.Relation.To}}){{if .Delete}} on delete {{.Delete}}{{end}}{{end}}
{{define "setup"}}
var typeSetup = `
insert into %s.object_type values {{range $i , $val := .Tokens}}
	{{if $i}},{{end}}(default, '{{.Name}}', '{{.Name}}'){{end}};
`
{{end}}
{{define "index"}}
{{end}}
