{{define "init"}}// DON'T EDIT *** generated by ormgen *** DON'T EDIT
package {{.PackageName}}

import "fmt"

const ( {{range .Tokens}} {{$natfields := ffilterslice .Fields}}{{$nlen := len $natfields | min1}}
	{{.Name}}Table = `
	create table if not exists %[1]s.{{ .Table}}({{range $fi, $fld := $natfields}}
	  {{if .Relation}}{{template "relation" .}}{{else }}{{.Column}} {{.SQLType}}{{if .Link}}{{lookuplink .Link}}{{end}}{{if .Primary }} primary key{{else}}{{if .Delete}} on delete {{.Delete}}{{end}}{{if .Unique}} unique{{end}}{{if .NotNull}} not null{{end}}{{if .Default}} default {{.Default}}{{end}}{{end}}{{end}}{{if lt $fi $nlen}},{{end}}{{end}}{{if .CompositeKey}},
	  primary key({{range $fii, $ckd := .CompositeKey}}{{if $fii}},{{end}}{{.}}{{end}}){{end}}
	);`
{{end}}
)

{{range .Tokens}}
func create{{.Name}}Table(schema string) string {
	return fmt.Sprintf({{.Name}}Table, schema)
}{{end}}

type createTable func (id string) string

var tables = map[string]createTable{ {{range .Tokens}}
	"{{.Name}}": create{{.Name}}Table,{{end}} 
}

func New(schema string, st []string) []string {
	var tstrings []string
	if len(st) > 0 {
		for _, t := range st {
			if create, ok := tables[t]; ok {
				tstrings = append(tstrings, create(schema))	
			}
		}
		return tstrings
	}
	for _, create := range tables {
		tstrings = append(tstrings, create(schema))	
	}
	return tstrings
}

{{template "schema" schemarg .Tokens}}
{{template "setup" .}}
{{end}}

{{define "schema"}}
{{range .}}
var {{title .Schema}}Schema  = []string{ {{range .Tables}}
	"{{ .Name}}",{{end}}
}{{end}}
{{end}}
{{define "relation"}}{{.Relation.From}} {{.Relation.SQLType}} references %[1]s.{{.Relation.Table}}({{.Relation.To}}){{if .Delete}} on delete {{.Delete}}{{end}}{{if .Relation.NotNull}} not null{{end}}{{end}}
{{define "setup"}}
var typeSetup = `
insert into %s.object_type values {{range $i , $val := .Tokens}}
	{{if $i}},{{end}}(default, '{{.Name}}', '{{.Name}}'){{end}};
`
{{end}}
